"""CaseFOAM utility.

A set of utilities to use with CaseFOAM.

"""
import os
import PyFoam.RunDictionary.ParsedParameterFile as PPF


def mkRmCases(baseCase, cases, isWriteDir=False):
    """Make case remove file.

    Generates a bash script 'rmCases' to remove all cases and bring folder
    to original structure.

    Parameters
    ----------
    baseCase : string
        Path to the baseCase directory.
    cases : list
        List of parent, child and grandchild names.
    isWriteDir : bool
        If ``baseCase`` is a copy defined by ``writeDir``, only the
        ``writeDir`` will be removed.

    """
    with open('rmCases', 'w') as _rmCasesFile:
        # write script head
        _rmCasesFile.write('# Script to remove all cases and bring folder to '
                           'original structure\n')

        # bash command to remove cases
        for case in cases[0]:
            _rmCasesFile.write('rm -rf %s*\n' % os.path.join(baseCase, case))

        # bash command to rebuild original structure
        _rmCasesFile.write('\nmv %s %s\n' %
                           (os.path.join(baseCase, 'baseCase', '*'),
                            os.path.join(baseCase, '')))
        _rmCasesFile.write('rm -rf %s\n' % os.path.join(baseCase, 'baseCase'))
        _rmCasesFile.write('rm Allrun Allclean rmCases\n')

        if isWriteDir:
            _rmCasesFile.write(
                'while true; do\n'
                '    read -p "Delete %s directory? All changes in %s will be lost. [y/N] " yn\n'
                '    case $yn in\n'
                '        [Yy]* ) rm -rf %s; break;;\n'
                '        [Nn]* ) exit;;\n'
                '        * ) exit;;\n'
                '    esac\n'
                'done\n'
                % (baseCase, baseCase, baseCase)
            )
            _rmCasesFile.write('rm -rf %s\n' % baseCase)

    os.system('chmod +x rmCases')
def mkAllSendToServer(baseCase):
    """Make Allrun and Allclean script.

    Generate a Allrun and Allclean script to run and clean all cases
    generated by CaseFOAM.

    Parameters
    ----------
    baseCase : string
        Path to the baseCase directory.

    """
    cases = list()
    for _root, _dirs, _files in os.walk(baseCase):
        for _file in _files:
            if _file.endswith('run') and 'baseCase' not in _root:
                cases.append(_root)

    # generate Allrun
    with open('AllSendToServer', 'w') as _allrunFile:
        # write script head
        
        _allrunFile.write('#!/bin/sh \n')
        _allrunFile.write('cd ${0%/*} || exit 1\n ')
        _allrunFile.write('cases="')
	
	
        
        for case in cases:
            with open(case+"/system/controlDict") as openfile:
            	for line in openfile:
        		for part in line.split():
				
            			if "application" in part:
                			word= (line.split()[1])
	    x = case.split('/')
	    solver=(word.split(';')[0])
            
            name=x[1]
	    
	    for i in range(2,len(x)):
		name=name+('_'+x[i])
	    #you may adjust accordingly
            destination='/home/scratch/user/$case'
            with open(case+'/mpi_job.sh', 'w') as _mpijobfile:		
            	_mpijobfile.write('#!/bin/bash\n')
		_mpijobfile.write('#SBATCH --account=yoursupervisoraccount\n')
		_mpijobfile.write('#SBATCH --time=0-72:00\n')
                _mpijobfile.write('#SBATCH --nodes=1\n')
		_mpijobfile.write('#SBATCH --ntasks-per-node=16\n')
		_mpijobfile.write('#SBATCH --mem-per-cpu=1291M\n')
		_mpijobfile.write('#SBATCH --job-name=%s'%name+'\n')
		_mpijobfile.write('#SBATCH --output=%x-%j.out\n')
		_mpijobfile.write('#SBATCH --error=error-%j.out\n\n')
		_mpijobfile.write('module purge\n')
		_mpijobfile.write('module load nixpkgs/16.09  gcc/4.8.5  openmpi/2.1.1 openfoam/2.3.1\n')
		_mpijobfile.write('srun %s'%solver+' -parallel>&log\n')
            _allrunFile.write('./%s\t' % case)
	    if case==cases[-1]:
		_allrunFile.write('"\n')
       	_allrunFile.write('for case in $cases\n')
	_allrunFile.write('do\n')
	_allrunFile.write('(\n')
        _allrunFile.write('cd $case\n')
	_allrunFile.write('echo $(pwd)\n')
	_allrunFile.write('./Allrun.pre\n')
	_allrunFile.write('ssh username@machine "( mkdir -p %s'%destination+' && exit)"\n')
	_allrunFile.write('scp -prq $(pwd)/. username@machine:%s'%destination+'\n')
        _allrunFile.write('ssh username@machine "( cd  %s'%destination+' && sbatch mpi_job.sh)"\n')
	_allrunFile.write(')\n')
	_allrunFile.write('done')
	
    os.system('chmod +x AllSendToServer')

def mkAllRunClean(baseCase):
    """Make Allrun and Allclean script.

    Generate a Allrun and Allclean script to run and clean all cases
    generated by CaseFOAM.

    Parameters
    ----------
    baseCase : string
        Path to the baseCase directory.

    """
    cases = list()
    for _root, _dirs, _files in os.walk(baseCase):
        for _file in _files:
            if _file.endswith('run') and 'baseCase' not in _root:
                cases.append(_root)

    # generate Allrun
    with open('Allrun', 'w') as _allrunFile:
        # write script head
        _allrunFile.write('# OpenFOAM Allrun script to run all cases generated'
                          ' by CaseFOAM\n\n')

        for case in cases:
            _allrunFile.write('%s/Allrun &\n' % case)

    # generate Allclean
    with open('Allclean', 'w') as _allcleanFile:
        # write script head
        _allcleanFile.write('# OpenFOAM Allclean script to clean all cases'
                            ' generated by CaseFOAM\n\n')

        for case in cases:
            _allcleanFile.write('%s/Allclean &\n' % case)

    os.system('chmod +x Allrun Allclean')


def getFileStructure(file):
    """Get the structure of OpenFOAM dictionary.

    Parameters
    ----------
    file : str
        Path to the OpenFOAM file.

    Returns
    -------
    fileStructure : dict
        Content of the OpenFOAM file as dictionary.

    Examples
    --------
    Get the file content and structure of a velocity file

    >>> casefoam.utility.getFileStructure('0/U')
    {'boundaryField': {'bottom': {'type': 'symmetryPlane'},
      'defaultFaces': {'type': 'empty'},
      'inlet': {'type': 'fixedValue', 'value': 'uniform (3 0 0)'},
      'obstacle': {'type': 'slip'},
      'outlet': {'inletValue': 'uniform (3 0 0)',
       'type': 'inletOutlet',
       'value': 'uniform (3 0 0)'},
      'top': {'type': 'symmetryPlane'}},
     'dimensions': '[ 0 1 -1 0 0 0 0 ]',
     'internalField': 'uniform (3 0 0)'}

    """
    fileStructure = PPF.ParsedParameterFile(file)
    return fileStructure.content
